tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  sodalite.nodes.RegistryServerCertificate:
    description: TLS certificates for Docker Registry server.
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      targetNamespace: "sodalite.nodes"
      abstract: "false"
      final: "false"
    attributes:
      cert_files_prefix:
        description: Certificate filename prefix. Full cert path is [cert_path]/[cert_files_prefix].crt
        type: string
    properties:
      cert_ipv4_address:
        type: string
        description: IP to be written to Subject Alternative Name (SAN). If missing, SAN will be set to host's public_address
        required: false
      domain_name:
        type: string
        description: Domain name of server. If missing, it will be set to IP. This will be mapped to 'Common name'.
        required: false
      email_address:
        type: string
        description: The emailAddress field of the certificate signing request subject.
      cert_path:
        type: string
        description: Path where required files are stored.
      country_name:
        type: string
        description: Country name field of the certificate signing request subject.
      organization_name:
        type: string
        description: The organizationName field of the certificate signing request subject.
      cert_files_prefix:
        type: string
        description: Filename of certs. If missing, it will be set to common_name. This parameter is supposed to be here until opera enables intrinsic functions on all depths.
        required: false
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              cert_ipv4_address:
                type: string
                required: true
                default: { get_property: [ SELF, cert_ipv4_address ] }
              domain_name:
                type: string
                required: true
                default: { get_property: [ SELF, domain_name ] }
              email_address:
                type: string
                required: true
                default: { get_property: [ SELF, email_address ] }
              cert_path:
                type: string
                required: true
                default: { get_property: [ SELF, cert_path ] }
              country_name:
                type: string
                required: true
                default: { get_property: [ SELF, country_name ] }
              organization_name:
                type: string
                required: true
                default: { get_property: [ SELF, organization_name ] }
              cert_files_prefix:
                type: string
                required: true
                default: { get_property: [ SELF, cert_files_prefix ] }
              public_ipv4_address:
                type: string
                required: true
                default: { get_attribute: [ SELF, host, public_address ] }
            implementation:
              primary: add_registry_server_cert
              dependencies: [ ca.crt, ca.key ]
          delete:
            inputs:
              cert_path:
                type: string
                required: true
                default: { get_attribute: [ SELF, cert_path ] }
            implementation:
              primary: remove_registry_server_cert
    artifacts:
      ca.key:
        type: tosca.artifacts.File
        file: ca.key
      remove_registry_server_cert:
        type: radon.artifacts.Ansible
        file: remove_registry_server_cert.yml
      ca.crt:
        type: tosca.artifacts.File
        file: ca.crt
      add_registry_server_cert:
        type: radon.artifacts.Ansible
        file: add_registry_server_cert.yml
