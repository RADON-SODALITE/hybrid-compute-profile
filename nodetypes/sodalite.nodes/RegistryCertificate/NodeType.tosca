tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  sodalite.nodes.RegistryCertificate:
    description: TLS certificates, that enable docker client to connect with Docker Registry
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      targetNamespace: "sodalite.nodes"
      abstract: "false"
      final: "false"
    properties:
      email_address:
        type: string
        description: The emailAddress field of the certificate signing request subject.
      country_name:
        type: string
        description: Country name field of the certificate signing request subject.
      registry_ip:
        type: string
        description: IP of the SODALITE docker registry
        default: "localhost"
      organization_name:
        type: string
        description: The organizationName field of the certificate signing request subject.
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              email_address:
                type: string
                required: true
                default: { get_property: [ SELF, email_address ] }
              country_name:
                type: string
                required: true
                default: { get_property: [ SELF, country_name ] }
              registry_ip:
                type: string
                required: true
                default: { get_property: [ SELF, registry_ip ] }
              organization_name:
                type: string
                required: true
                default: { get_property: [ SELF, organization_name ] }
              common_name:
                type: string
                required: true
                default: { get_attribute: [ SELF, host, name ] }
              public_ipv4_address:
                type: string
                required: true
                default: { get_attribute: [ SELF, host, public_address ] }
            implementation:
              primary: add_cert
              dependencies: [ ca.crt, ca.key ]
          delete:
            inputs:
              registry_ip:
                type: string
                required: true
                default: { get_property: [ SELF, registry_ip ] }
            implementation:
              primary: remove_cert
    artifacts:
      ca.key:
        type: tosca.artifacts.File
        file: ca.key
      remove_cert:
        type: radon.artifacts.Ansible
        file: remove_cert.yml
      ca.crt:
        type: radon.artifacts.File
        file: ca.crt
      add_cert:
        type: radon.artifacts.Ansible
        file: add_cert.yml
